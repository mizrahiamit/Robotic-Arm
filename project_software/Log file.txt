
Name: Log file.xt
Author: Mizrahi Amit
Last update:4/3/17
Project: Camera Control XY Robotic Arm


4.3.17 12:30: Update main.py -
			  Arm position parameters 
			  locate arm position

			  update_image_processing functions.py-
			  def get_arm_position()
			  def detect_circle_by_color()
			  def get_color_mask()
			  def return_circles_values()

11.3.17 18:51:Update main_function.py - 
			  
             def take_new_picture(_x_pos,_y_pos):
			    # Create the in-memory stream
			    stream = io.BytesIO()
			    with picamera.PiCamera() as camera:
			        camera.resolution = (640, 480)
			        camera.start_preview()
			        time.sleep(2)
			        camera.capture(stream, format='jpeg')
			    # Construct a numpy array from the stream
			    data = np.fromstring(stream.getvalue(), dtype=np.uint8)
			    # "Decode" the image from the array, preserving colour
			    image = cv2.imdecode(data, 1)
			    # OpenCV returns an array with data in BGR order. If you want RGB instead

			    cv2.line(image,(_x_pos+10,_y_pos),(_x_pos-10,_y_pos),(0,0,255),1)
			    cv2.line(image,(_x_pos,_y_pos+10),(_x_pos,_y_pos-10),(0,0,255),1)
			    cv2.imwrite("Test Image.jpg",image)
			        
			    return True

11.3.17 17:30:Update main.py - 
				self.connect(self.check_btn,SIGNAL("clicked()"),self.check_clicked)

				self.start_btn.setEnabled(False)

				def check_clicked(self):
			        take_new_picture(0,0)
			        self._shoulder_pos,self._elbow_pos,self._wrist_pos=get_arm_position()

			        if (self._shoulder_pos==[None,None]) or (self._elbow_pos==[None,None]) or (self._wrist_pos==[None,None]):  
			            self.act_msg="Please try again"
			            self.status_msg="Robotic arm was not recognized"
			            return False
			        else:
			            self.act_msg="Please choose coordinates"
			            self.status_msg="Setup is ready"
			            return True




			    self._arm_radius = 0.00

			    def start_clicked(self,bool):
			        self.status_msg.setText("Start clicked")
			        print "Start clicked"
			        
			        dst_coordinate = self._x_pos , self._y_pos
			        src_coordinate = self._shoulder_pos
			        radius = self._arm_radius 

			        if(check_coordinates(dst_coordinate,src_coordinate,radius)):

			        def check_clicked(self):
				        print "taking new picture"
				        take_new_picture(0,0)
				        print "get arm position"
				        self._shoulder_pos,self._elbow_pos,self._wrist_pos=get_arm_position()
				        print self._shoulder_pos
				        print self._elbow_pos
				        print self._wrist_pos
				        
				        if (self._shoulder_pos==(None,None)) or (self._elbow_pos==(None,None)) or (self._wrist_pos==(None,None)):  
				            print "Robotic arm was not recognized "
				            self.act_msg.setText("Please try again")
				            self.status_msg.setText("Robotic arm was not recognized")
				            return False
				        else:
				            print "Robotic arm was recognized"
				            self._arm_radius = math.hypot(self._wrist_pos[0] - self._shoulder_pos[0], self._wrist_pos[1] - self._shoulder_pos[1])
				            print "radius", self._arm_radius
				            self.start_btn.setEnabled(True)
				            self.l2.setPixmap(QtGui.QPixmap("Test Image.jpg"))
				            self.act_msg.setText("Please choose coordinates")
				            self.status_msg.setText("Setup is ready")
				            return True


			    Update main_function.py-
			    	def check_coordinates(dest_coor,arm_src_coor,arm_radius):
					    #return true if move is possible, else false.
					    print "Checking if move is possible"
					 
					    distance = math.hypot(dest_coor[0] - arm_src_coor[0], dest_coor[1] - arm_src_coor[1])
					    if (distance < arm_radius):
					        return True
					    else:
					        return False

			    Update image_processing_functions.py-
			    	x = circles[0][0][0]
        			y = circles[0][0][1]


